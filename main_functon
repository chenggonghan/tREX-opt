library(lme4)
library(numDeriv)

estimate_3D<-function(P.int,Par,X)
{
P.V<-as.vector(P.int)

.objective_poisson<-function(P.VV)
{
P<-matrix(P.VV, ncol=3)
D.V<-as.vector(sqrt(dist(P)))
X.V<-X[lower.tri(X)]
temp<-c()
for(i in 1:length(X.V))
{ 
  lambda<-exp(Par[1]+Par[2]*log(D.V[i]))
  if(lambda<=10)
  {
  temp<-c(temp,(X.V[i]*log(lambda)-log(exp(lambda)-1)))
  }
  else{temp<-c(temp,(X.V[i]*log(lambda)-lambda))}
  }
# Negative log likelihood
return(-sum(temp))
}

out<-optim(P.V,.objective_poisson,method="Nelder-Mead")
struct<-out$par
struct3d<-matrix(struct,ncol=3)
return(list(struct3d,out$value))
}  

# estimated 3d coordinate given all the other information
# X is the HiC matrix
# P is the corresponding 3D coordinates
# Ignoring covariate for now
# W is the random effects

estimate_parameters<-function(X,P)
{
X.V<-X[lower.tri(X)]
P.V<-sqrt(as.vector(dist(P)))
Wx<-c()
Wy<-c()
for(i in 2:nrow(X)) 
 {  
   for(j in 1:(i-1))
   {
     Wx<-c(Wx,i)
     Wy<-c(Wy,j)
   }
}
data<-data.frame(Y=X.V,P=P.V,Wx=Wx,Wy=Wy)
#data.R=data[data$Y>0,]
data.R<-data
modelp<-glmer(Y~P+(1|Wx)+(1|Wy),data=data.R,family = poisson(link = "log"))
models<-summary(modelp)
return(models$coefficients[,1])
}

## estimate all the other parameters given 3d coordinates
## The main function
## X is the n*n contact matrix, only lower diagonal is needed
## P.int is the initial guessed 3D structure
## max_iter is the number of iterations

trexopt<-function(X,max_iter=10)
{
N<-nrow(X)
P.int<-matrix(rnorm(3*N),ncol=3)
neg_loglike<-rep(NA,max_iter)
parameter_result<-matrix(NA,max_iter,2)
parameter_temp<-c(0.5,-0.5)
for(i in 1:max_iter)
{
cat("3D iteration = ", i, "\n")
struct_temp<-estimate_3D(P.int,parameter_temp,X)
P.int<-struct_temp[[1]]
neg_loglike[i]<-struct_temp[[2]]
cat("parameter iteration = ", i, "\n")
parameter_temp<-estimate_parameters(X,P.int)
parameter_result[i,]<-parameter_temp
}
return(list(struct=P.int,neg_loglik=neg_loglike,parameter=parameter_result))
}
